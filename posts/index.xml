<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Seiri&#39;s Blog</title>
    <link>https://seiri-blog.github.io/posts/</link>
    <description>Recent content in Posts on Seiri&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>2024 Seiri All rights reserved</copyright>
    <lastBuildDate>Wed, 15 Oct 2025 09:14:38 +0900</lastBuildDate><atom:link href="https://seiri-blog.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linuxでスケジュールを設定する方法</title>
      <link>https://seiri-blog.github.io/posts/linux-batch-schedule/</link>
      <pubDate>Wed, 15 Oct 2025 09:14:38 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/linux-batch-schedule/</guid>
      <description>Linux で毎日自動的に Python スクリプトを実行し、Git にコミット・プッシュする方法 定期的に Python スクリプトを実行して、結果を Git に自動コミット・プッシュした</description>
    </item>
    
    <item>
      <title>React Routerによるページ遷移</title>
      <link>https://seiri-blog.github.io/posts/react-introduction-part11/</link>
      <pubDate>Mon, 22 Sep 2025 15:48:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/react-introduction-part11/</guid>
      <description>React 入門：React Routerによるページ遷移 React でシングルページアプリ（SPA）を作るとき、複数のページに分けて表示するには React Router がよく使われ</description>
    </item>
    
    <item>
      <title>React 入門で知っておくべき注意点</title>
      <link>https://seiri-blog.github.io/posts/react-introduction-part12/</link>
      <pubDate>Mon, 22 Sep 2025 15:48:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/react-introduction-part12/</guid>
      <description>React 入門で知っておくべき注意点まとめ React はシンプルな UI ライブラリですが、「HTML・CSS・JavaScript とは少し違う考え方」が必要になり</description>
    </item>
    
    <item>
      <title>コンポーネント間のデータ共有の基本</title>
      <link>https://seiri-blog.github.io/posts/react-introduction-part10/</link>
      <pubDate>Mon, 22 Sep 2025 15:42:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/react-introduction-part10/</guid>
      <description>React 入門：コンポーネント間のデータ共有の基本 React ではコンポーネントを小さく分けて再利用する設計が基本です。しかし、複数のコンポーネントが同じデー</description>
    </item>
    
    <item>
      <title>useCallbackで関数を最適化する</title>
      <link>https://seiri-blog.github.io/posts/react-introduction-part9/</link>
      <pubDate>Mon, 22 Sep 2025 15:38:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/react-introduction-part9/</guid>
      <description>React 入門：useCallbackで関数を最適化する React ではコンポーネントが再レンダーされるたびに、関数も毎回再生成されます。小規模なアプリでは問</description>
    </item>
    
    <item>
      <title>useEffectの実践的な使い方</title>
      <link>https://seiri-blog.github.io/posts/react-introduction-part8/</link>
      <pubDate>Mon, 22 Sep 2025 15:32:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/react-introduction-part8/</guid>
      <description>React 入門：useEffectの実践的な使い方 React でコンポーネントを作っていると、「初回表示時にデータを取得したい」「特定の値が変わったときに処理</description>
    </item>
    
    <item>
      <title>条件付きレンダリングの基本</title>
      <link>https://seiri-blog.github.io/posts/react-introduction-part7/</link>
      <pubDate>Mon, 22 Sep 2025 15:29:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/react-introduction-part7/</guid>
      <description>React 入門：条件付きレンダリングの基本 アプリ開発をしていると「ある条件のときだけ表示したい」「ログインしているかどうかで画面を切り替えたい」とい</description>
    </item>
    
    <item>
      <title>リストレンダリングとキーの重要性</title>
      <link>https://seiri-blog.github.io/posts/react-introduction-part6/</link>
      <pubDate>Mon, 22 Sep 2025 15:28:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/react-introduction-part6/</guid>
      <description>React 入門：リストレンダリングとキーの重要性 React でデータを扱うとき、配列をもとに複数の要素を並べて表示するケースはよくあります。例えば「Todo リ</description>
    </item>
    
    <item>
      <title>イベントハンドリングの基本</title>
      <link>https://seiri-blog.github.io/posts/react-introduction-part5/</link>
      <pubDate>Mon, 22 Sep 2025 15:22:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/react-introduction-part5/</guid>
      <description>React 入門：イベントハンドリングの基本 React でインタラクティブな UI を作るには、イベントハンドリング が欠かせません。ユーザーがボタンをクリックしたり、</description>
    </item>
    
    <item>
      <title>PropsとStateの違い</title>
      <link>https://seiri-blog.github.io/posts/react-introduction-part4/</link>
      <pubDate>Mon, 22 Sep 2025 15:20:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/react-introduction-part4/</guid>
      <description>React 入門：Props と State の違い React を学び始めると、必ず登場する重要な概念が Props（プロップス） と State（ステート） です。どちらもコンポー</description>
    </item>
    
    <item>
      <title>コンポーネント作成の考え方</title>
      <link>https://seiri-blog.github.io/posts/react-introduction-part3/</link>
      <pubDate>Mon, 22 Sep 2025 15:17:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/react-introduction-part3/</guid>
      <description>React 入門：コンポーネント作成の考え方 React を学び始めると最初に直面するのが「どこまでをコンポーネントに分けるべきか？」という悩みです。コンポーネン</description>
    </item>
    
    <item>
      <title>クラスコンポーネントと関数コンポーネントの違い</title>
      <link>https://seiri-blog.github.io/posts/react-introduction-part2/</link>
      <pubDate>Mon, 22 Sep 2025 15:13:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/react-introduction-part2/</guid>
      <description>クラスコンポーネントと関数コンポーネントの違い React を学び始めると必ず出てくるのが、「クラスコンポーネント」と「関数コンポーネント」 という 2 つの</description>
    </item>
    
    <item>
      <title>React入門</title>
      <link>https://seiri-blog.github.io/posts/react-introduction-part1/</link>
      <pubDate>Mon, 22 Sep 2025 14:49:46 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/react-introduction-part1/</guid>
      <description>React 紹介 Web アプリやサービスを開発する上で、いまや欠かせない存在となっているのが React です。React は Meta（旧 Facebook）が開発したフロ</description>
    </item>
    
    <item>
      <title>MacでHugoをインストールする方法まとめ</title>
      <link>https://seiri-blog.github.io/posts/how-to-install-hugo/</link>
      <pubDate>Tue, 26 Aug 2025 11:51:21 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/how-to-install-hugo/</guid>
      <description>静的サイトジェネレーター「Hugo」は、高速なビルド性能とシンプルな運用で人気のあるツールです。特にブログやポートフォリオサイトを作る際に非</description>
    </item>
    
    <item>
      <title>Intramartの導入方法：ステップバイステップガイド</title>
      <link>https://seiri-blog.github.io/posts/intra-mart-import/</link>
      <pubDate>Tue, 26 Aug 2025 11:44:39 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/intra-mart-import/</guid>
      <description>はじめに Intramart の導入を成功させるには、適切な計画と準備が不可欠です。本記事では、Intramart の導入プロセスを段階的に解説し、スムーズな導入</description>
    </item>
    
    <item>
      <title>intra-mart 入門：基礎から学ぶ業務プロセス改革のプラットフォーム</title>
      <link>https://seiri-blog.github.io/posts/intra-mart-introduction/</link>
      <pubDate>Tue, 26 Aug 2025 11:37:58 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/intra-mart-introduction/</guid>
      <description>はじめに 近年、企業のデジタル変革（DX）が急速に進む中で、業務プロセスを効率化し、生産性を高めるためのプラットフォームとして注目されているの</description>
    </item>
    
    <item>
      <title>Macの.DS_Store を一括削除する方法</title>
      <link>https://seiri-blog.github.io/posts/mac-delete-dot-ds_store/</link>
      <pubDate>Thu, 19 Dec 2024 11:04:22 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/mac-delete-dot-ds_store/</guid>
      <description>.DS_Store ファイルとは？ macOS の Finder（ファイル管理アプリ）がフォルダ内の設定情報を保存するために作成する隠しファイルです。「DS」は「Deskt</description>
    </item>
    
    <item>
      <title>MacでMicrosoft Officeソフトウェアをアンインストールする方法</title>
      <link>https://seiri-blog.github.io/posts/mac-uninstall-microsoft-office/</link>
      <pubDate>Wed, 18 Dec 2024 18:10:10 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/mac-uninstall-microsoft-office/</guid>
      <description>Mac で Office ソフトウェアをアンインストールする方法 Microsoft Office は多くの人にとって必要不可欠なツールですが、不要になった場合や新しいバージョンに移行したい場</description>
    </item>
    
    <item>
      <title>MacでFFmpegを完全にアンインストールする方法</title>
      <link>https://seiri-blog.github.io/posts/how-uninstall-ffmpeg/</link>
      <pubDate>Tue, 22 Oct 2024 09:28:23 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/how-uninstall-ffmpeg/</guid>
      <description>詳細ガイド FFmpeg は、音声や動画の変換・編集に非常に便利なオープンソースのツールですが、必要がなくなった場合や新しいバージョンをクリーンにインスト</description>
    </item>
    
    <item>
      <title>Pythonデータスパイダー（Webスクレイピング）上級ガイド</title>
      <link>https://seiri-blog.github.io/posts/python-data-spider-advanced/</link>
      <pubDate>Thu, 04 Jul 2024 17:53:03 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/python-data-spider-advanced/</guid>
      <description>ウェブスクレイピングは、基本的な技術を習得した後に、より高度な手法を学ぶことで、さらに強力で効率的なデータ収集が可能になります。このガイドで</description>
    </item>
    
    <item>
      <title>Pythonデータスパイダー（Webスクレイピング）中級ガイド</title>
      <link>https://seiri-blog.github.io/posts/python-data-spider-intermediate/</link>
      <pubDate>Thu, 04 Jul 2024 17:53:03 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/python-data-spider-intermediate/</guid>
      <description>ウェブスクレイピングは、データ収集の強力な手法として広く利用されています。初心者向けの基礎を押さえた後、より高度な技術を使って効率的にデータ</description>
    </item>
    
    <item>
      <title>Pythonデータスパイダー（Webスクレイピング）初級ガイド</title>
      <link>https://seiri-blog.github.io/posts/python-data-spider-beginner/</link>
      <pubDate>Thu, 04 Jul 2024 17:53:03 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/python-data-spider-beginner/</guid>
      <description>ウェブスクレイピングは、ウェブサイトからデータを自動的に抽出する技術であり、データ分析、研究、マーケティング、競合分析など様々な分野で活用さ</description>
    </item>
    
    <item>
      <title>JavaScriptでの小数点の計算誤差とその解決方法</title>
      <link>https://seiri-blog.github.io/posts/js-float-calculate/</link>
      <pubDate>Tue, 02 Jul 2024 14:45:20 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/js-float-calculate/</guid>
      <description>JavaScriptでプログラミングをしていると、数値計算における浮動小数点数の誤差に遭遇することがあります。この誤差は、特に金融アプリケー</description>
    </item>
    
    <item>
      <title>Mac で NTFS ディスクにファイルをコピーする方法（無料ソフトウェア編）</title>
      <link>https://seiri-blog.github.io/posts/mac-copy-file-to-ntfs-disk/</link>
      <pubDate>Tue, 25 Jun 2024 09:12:40 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/mac-copy-file-to-ntfs-disk/</guid>
      <description>目的 NTFS フォーマットのディスクにファイルを書き込む必要があるけれども、デフォルトでは Mac が NTFS ディスクを読み取り専用として Mac で NTFS ディスクにファイル</description>
    </item>
    
    <item>
      <title>ChatGPTのプロンプトを効果的に使用して仕事の効率を向上させる方法</title>
      <link>https://seiri-blog.github.io/posts/chatgpt-prompts-recommend/</link>
      <pubDate>Fri, 21 Jun 2024 18:34:05 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/chatgpt-prompts-recommend/</guid>
      <description>目的 ChatGPT を使用する際、さまざまなプロンプトがユーザーの仕事の効率を多方面で向上させることができます。この記事では、これらのプロンプトをどのよう</description>
    </item>
    
    <item>
      <title>Python でファイルをダウンロードする方法</title>
      <link>https://seiri-blog.github.io/posts/python-download-file/</link>
      <pubDate>Fri, 21 Jun 2024 18:24:49 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/python-download-file/</guid>
      <description>Python は、様々なタスクを簡単に実行できる強力なプログラミング言語です。ファイルのダウンロードもその一つであり、標準ライブラリやサードパーティライ</description>
    </item>
    
    <item>
      <title>MacにHomebrewをインストールする方法</title>
      <link>https://seiri-blog.github.io/posts/how-mac-to-install-home-brew/</link>
      <pubDate>Thu, 13 Jun 2024 20:15:39 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/how-mac-to-install-home-brew/</guid>
      <description>MacにHomebrewをインストールする方法 Homebrew（ホームブリュー）は、Mac OS向けのパッケージ管理システムで、ターミナルから</description>
    </item>
    
    <item>
      <title>WindowsとMacのショートカットキーのマップピング</title>
      <link>https://seiri-blog.github.io/posts/win-and-mac-short-cut-mapping/</link>
      <pubDate>Thu, 13 Jun 2024 20:00:54 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/win-and-mac-short-cut-mapping/</guid>
      <description>Windows と Mac のショートカットキー：知っておくべき基本マッピング パソコンを効率よく使うためには、キーボードショートカットの活用が欠かせません。しかし</description>
    </item>
    
    <item>
      <title>データフレーム（DataFrame）とは</title>
      <link>https://seiri-blog.github.io/posts/python-dataframe/</link>
      <pubDate>Thu, 13 Jun 2024 19:34:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/python-dataframe/</guid>
      <description>データフレーム（DataFrame）とは？その基礎から活用方法まで詳しく解説 現代のデータ分析において、データフレーム（DataFrame）は</description>
    </item>
    
    <item>
      <title>PythonでExcelファイルを読み取る方法</title>
      <link>https://seiri-blog.github.io/posts/python-read-excel/</link>
      <pubDate>Thu, 13 Jun 2024 19:25:04 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/python-read-excel/</guid>
      <description>PythonでExcelファイルを読み取るライブラリ:openpyxl、xlrd、pandas PythonでExcelファイルを操作するため</description>
    </item>
    
    <item>
      <title>dmg2johnの使い方ガイド：John the Ripperと一緒に.dmgファイルのパスワードをクラックする方法</title>
      <link>https://seiri-blog.github.io/posts/how-to-use-jhon-crack-dmg/</link>
      <pubDate>Sun, 19 May 2024 22:55:30 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/how-to-use-jhon-crack-dmg/</guid>
      <description>はじめに Macユーザーならおなじみのディスクイメージファイル、.dmg形式のファイルは、アプリケーションやその他のコンテンツを配布するために</description>
    </item>
    
    <item>
      <title>スクリーンをロックしないVBSスクリプトを作成する方法</title>
      <link>https://seiri-blog.github.io/posts/unlock-screen-vbs-script/</link>
      <pubDate>Fri, 26 Apr 2024 10:15:30 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/unlock-screen-vbs-script/</guid>
      <description>前提条件 Windows システム VBS スクリプトの実行権限があります 概要 Window システムスクリーンをロックしないには、Mouse イベントまたはキーボードを動作する必</description>
    </item>
    
    <item>
      <title>Windowsバッチで7zを使ってフォルダを一括Zipする方法</title>
      <link>https://seiri-blog.github.io/posts/folder-bulk-zip-by-cmd-batch/</link>
      <pubDate>Fri, 26 Apr 2024 09:55:48 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/folder-bulk-zip-by-cmd-batch/</guid>
      <description>前提 7z をインストールしている 7z をインストールしていない場合は こちら からインストールしてください やり方 7z のインストール場所を確認する 例: D:\7-Zip CMD バ</description>
    </item>
    
    <item>
      <title>Chrome拡張機能のタブ操作: chrome.tabs.query と chrome.tabs.update の使い方</title>
      <link>https://seiri-blog.github.io/posts/chrome-extension-tab-query-and-update/</link>
      <pubDate>Tue, 30 Jan 2024 11:34:09 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/chrome-extension-tab-query-and-update/</guid>
      <description>1. はじめ Google Chrome 拡張機能は、ユーザーエクスペリエンスを向上させるために様々な機能を提供しています。本記事では、タブに関連する情報を取得したり、タ</description>
    </item>
    
    <item>
      <title>Chrome拡張機能のメッセージング: onMessage と sendMessage の使い方</title>
      <link>https://seiri-blog.github.io/posts/chrome-extension-messaging/</link>
      <pubDate>Tue, 30 Jan 2024 09:54:44 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/chrome-extension-messaging/</guid>
      <description>1. はじめ Google Chrome 拡張機能の開発では、異なるコンポーネント間でデータをやり取りするために chrome.runtime.onMessage と chrome.runtime.sendMessage を使用します。 これにより、ポップアップ、コンテンツス</description>
    </item>
    
    <item>
      <title>PythonでRetry Request Utilityを作成する方法</title>
      <link>https://seiri-blog.github.io/posts/python-retry-request/</link>
      <pubDate>Tue, 26 Dec 2023 12:04:33 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/python-retry-request/</guid>
      <description>はじめに Python を使用して API リクエストを行う際、アプリケーションの信頼性はネットワークの問題やサーバーエラーによって挑戦されることがあります。本記</description>
    </item>
    
    <item>
      <title>SQLのEXCEPTの詳細な説明と使い方</title>
      <link>https://seiri-blog.github.io/posts/sql-excepct/</link>
      <pubDate>Fri, 08 Dec 2023 23:40:22 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/sql-excepct/</guid>
      <description>EXCEPT 句とは EXCEPT句は、2 つのクエリの結果セットを比較し、左側のクエリの結果から右側のクエリの結果を差し引く操作を行います。つまり、2 つの</description>
    </item>
    
    <item>
      <title>【Salesforce】SOQL入門</title>
      <link>https://seiri-blog.github.io/posts/salesforce-soql-introduction/</link>
      <pubDate>Thu, 07 Dec 2023 19:33:43 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-soql-introduction/</guid>
      <description>SOQL とは SOQL（Salesforce Object Query Language）は、Salesforce のデータをクエリするために特別に設計されたクエリ言語です。</description>
    </item>
    
    <item>
      <title>【Salesforce】SOQLのサブクエリ</title>
      <link>https://seiri-blog.github.io/posts/salesforce-soql-sub-query/</link>
      <pubDate>Thu, 07 Dec 2023 19:24:51 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-soql-sub-query/</guid>
      <description>SOQL のサブクエリ SOQL では、条件中にサブクエリを使用して親オブジェクトと子オブジェクトの関連を確認することができます。以下は、条件中でのサブクエリ</description>
    </item>
    
    <item>
      <title>Apexバッチの中に他のバッチを呼び出す方法</title>
      <link>https://seiri-blog.github.io/posts/apex-batch-call-another-batch/</link>
      <pubDate>Tue, 28 Nov 2023 09:48:53 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/apex-batch-call-another-batch/</guid>
      <description>Apexバッチとは Apexバッチは、Salesforce プラットフォーム上で大量のデータを効率的に処理するための仕組みです。バッチ処理は非同</description>
    </item>
    
    <item>
      <title>Vue3 画面遷移</title>
      <link>https://seiri-blog.github.io/posts/vue3-router/</link>
      <pubDate>Thu, 26 Oct 2023 11:19:23 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/vue3-router/</guid>
      <description>Vue Router は、Vue.js アプリケーションに対する公式のルーティングライブラリです。Vue Router を使用すると、シングルページアプリケーション（SPA）</description>
    </item>
    
    <item>
      <title>vue/multi-word-component-namesエラーについて</title>
      <link>https://seiri-blog.github.io/posts/vue-multi-word-component-names/</link>
      <pubDate>Thu, 26 Oct 2023 10:40:19 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/vue-multi-word-component-names/</guid>
      <description>vue/multi-word-component-names エラーについて Vue.js の規約では、コンポーネント名は常に複数の単語で構成するべきで、それに従っていない場合、Linter（コードの品質を確認する</description>
    </item>
    
    <item>
      <title>Vue3入門</title>
      <link>https://seiri-blog.github.io/posts/vue3-quick-start/</link>
      <pubDate>Thu, 26 Oct 2023 09:49:55 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/vue3-quick-start/</guid>
      <description>Vue3 での環境構築 Vue.js 3 プロジェクトを開始するための環境を構築する方法はいくつかありますが、最も一般的な方法は Vue CLI（Command Line Inter</description>
    </item>
    
    <item>
      <title>Vue3とVue2の違い</title>
      <link>https://seiri-blog.github.io/posts/vue3-and-vue2-difference/</link>
      <pubDate>Thu, 26 Oct 2023 09:28:52 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/vue3-and-vue2-difference/</guid>
      <description>Vue3 とは Vue.js 3（または Vue3）は、Vue.js の最新のメジャーバージョンであり、Vue.js のコアチームによって開発されました。Vue.js 3</description>
    </item>
    
    <item>
      <title>gitignoreの説明と作成方法</title>
      <link>https://seiri-blog.github.io/posts/how-to-make-gitignore/</link>
      <pubDate>Thu, 28 Sep 2023 09:49:57 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/how-to-make-gitignore/</guid>
      <description>.gitignore 説明 .gitignoreファイルは、Git リポジトリ内で管理されないファイルやディレクトリを指定するための設定ファイルです。このファイルに</description>
    </item>
    
    <item>
      <title>ダークモードの開発</title>
      <link>https://seiri-blog.github.io/posts/night-mode-developer/</link>
      <pubDate>Wed, 23 Aug 2023 09:19:08 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/night-mode-developer/</guid>
      <description>ダークモード作成の流れ ダークモードを実装する一般的な流れは以下の通りです。この流れは、HTML、CSS、JavaScript を使用してウェブ</description>
    </item>
    
    <item>
      <title>Chrome拡張機能開発の入門</title>
      <link>https://seiri-blog.github.io/posts/chrome-extension-developer/</link>
      <pubDate>Mon, 21 Aug 2023 11:28:04 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/chrome-extension-developer/</guid>
      <description>mainfest の定義(必須) manifest.json は、Chrome 拡張機能を定義するためのファイルです。 このファイルは、拡張機能の基本的な情報、設定、権限、リソースなどを指</description>
    </item>
    
    <item>
      <title>intra-martの説明</title>
      <link>https://seiri-blog.github.io/posts/what-is-intra-mart/</link>
      <pubDate>Mon, 31 Jul 2023 09:19:46 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/what-is-intra-mart/</guid>
      <description>intra-martとは Intra-mart（イントラマート）は、日本のサイボウズ株式会社が提供しているエンタープライズポータルおよび業務ア</description>
    </item>
    
    <item>
      <title>SQL WITHの使い方</title>
      <link>https://seiri-blog.github.io/posts/sql-with/</link>
      <pubDate>Thu, 20 Jul 2023 09:24:07 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/sql-with/</guid>
      <description>WITH の説明 WITHは、SQLクエリ内で一時的な名前付きクエリ結果セットを作成するための構文です。これにより、複雑なクエリをより簡潔かつ効率的に</description>
    </item>
    
    <item>
      <title>SQL UNIONとUNION ALLの使い方</title>
      <link>https://seiri-blog.github.io/posts/sql-union/</link>
      <pubDate>Thu, 20 Jul 2023 09:05:32 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/sql-union/</guid>
      <description>UNIONとは SQLのUNION演算子は、2つのSELECTクエリの結果を結合するために使用されるものです。UNIONを使用することで、2つ</description>
    </item>
    
    <item>
      <title>【Salesforce】LWCで日付選択コンポーネントを作る</title>
      <link>https://seiri-blog.github.io/posts/lwc-how-to-make-a-custom-date-picker/</link>
      <pubDate>Tue, 27 Jun 2023 15:09:13 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-how-to-make-a-custom-date-picker/</guid>
      <description>LWC 標準の日付選択コンポーネントは&amp;lt;lightning-input type=&amp;quot;date&amp;quot;&amp;gt;となりますが、カスタ</description>
    </item>
    
    <item>
      <title>【Salesforce】LWC の Lightning モーダル</title>
      <link>https://seiri-blog.github.io/posts/lwc-lightning-modal/</link>
      <pubDate>Tue, 27 Jun 2023 12:24:02 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-lightning-modal/</guid>
      <description>lightning/modal モジュール 「lightning/modal」はSalesforceのLightningコンポーネントフレームワークにおけるモーダルダイアロ</description>
    </item>
    
    <item>
      <title>【Salesforce】LWC の Lightning Confirm</title>
      <link>https://seiri-blog.github.io/posts/lwc-lightning-confirm/</link>
      <pubDate>Tue, 27 Jun 2023 11:16:42 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-lightning-confirm/</guid>
      <description>lightning/confirm モジュール lightning/confirm モジュールを使用すると、コンポーネントに確認モードを作成できます。コンポーネントで LightningConfirm を使用して、続行する前にユーザーが応答する</description>
    </item>
    
    <item>
      <title>【Salesforce】LWC のLightning Alert</title>
      <link>https://seiri-blog.github.io/posts/lwc-lightning-alert/</link>
      <pubDate>Tue, 27 Jun 2023 10:58:55 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-lightning-alert/</guid>
      <description>lightning/alert モジュール lightning/alert モジュールを使用すると、コンポーネントに警報モードを作成できます。機能やページだけでなく、コンポーネント上で LightningAlert を使用してシステ</description>
    </item>
    
    <item>
      <title>Javascriptで二分探索木</title>
      <link>https://seiri-blog.github.io/posts/javascript-binary-search-tree/</link>
      <pubDate>Fri, 23 Jun 2023 19:04:08 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/javascript-binary-search-tree/</guid>
      <description>二分探索木（Binary Search Tree）とは 二分探索木（Binary Search Tree）は、効率的なデータの挿入、検索、削除を可能にするデータ構造です。</description>
    </item>
    
    <item>
      <title>Javascriptでバブルソート</title>
      <link>https://seiri-blog.github.io/posts/javascript-bubble-sort/</link>
      <pubDate>Fri, 23 Jun 2023 18:59:33 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/javascript-bubble-sort/</guid>
      <description>バブルソート（Bubble Sort）とは バブルソート（Bubble Sort）は、アルゴリズムの中でも比較的単純なソート方法の一つです。要素の</description>
    </item>
    
    <item>
      <title>PreChatフォームのカスタマイズとカスタム項目保存</title>
      <link>https://seiri-blog.github.io/posts/salesforce-prechat-cutom-feilds-to-chattranscript/</link>
      <pubDate>Fri, 23 Jun 2023 13:53:59 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-prechat-cutom-feilds-to-chattranscript/</guid>
      <description>PreChat とは Salesforce では、PreChat（事前チャット）機能を提供しています。この機能を使用すると、チャット会話を開始する前に顧客とのやり取りを行うこと</description>
    </item>
    
    <item>
      <title>Pythonのpipアップデータ方法</title>
      <link>https://seiri-blog.github.io/posts/python-pip-upgrade/</link>
      <pubDate>Mon, 12 Jun 2023 17:37:23 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/python-pip-upgrade/</guid>
      <description>pip アップデータ Python の pip パッケージマネージャを使用して、インストールされているパッケージを最新バージョンにアップデートする方法はいくつかあります</description>
    </item>
    
    <item>
      <title>【Salesforce】Apexデバッグ方法</title>
      <link>https://seiri-blog.github.io/posts/salesforce-apex-debug/</link>
      <pubDate>Fri, 09 Jun 2023 18:05:01 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-apex-debug/</guid>
      <description>Salesforce のデバッグ方法 デバッグログの有効化: Salesforce のセットアップで、デバッグログを有効にすることができます。デバッグログは、Apex コードやトリガーの</description>
    </item>
    
    <item>
      <title>【Salesforce】Apexテストクラス作成する方法</title>
      <link>https://seiri-blog.github.io/posts/salesforce-apex-test-class/</link>
      <pubDate>Fri, 09 Jun 2023 18:01:10 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-apex-test-class/</guid>
      <description>Salesforce テストクラスは、Apex コードのユニットテストを実行するために使用されます。 以下は、Salesforce テストクラスの作成手順の概要です。</description>
    </item>
    
    <item>
      <title>【Salesforce】LWCでExperience Cloudログアウトする方法</title>
      <link>https://seiri-blog.github.io/posts/lwc-and-aura-experience-cloud-logout/</link>
      <pubDate>Fri, 09 Jun 2023 17:13:05 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-and-aura-experience-cloud-logout/</guid>
      <description>ログアウト方法 1 &amp;lt;site_name&amp;gt;/secur/logout.jspへ遷移し、ログアウトする方法 lwc:logout &amp;lt;template&amp;gt; &amp;lt;lightning-button label=&amp;#34;</description>
    </item>
    
    <item>
      <title>【Salesforce】ExperienceCloudサイト画面遷移Utilを自分で作る</title>
      <link>https://seiri-blog.github.io/posts/salesforce-lwc-navagation-common-util/</link>
      <pubDate>Wed, 31 May 2023 19:17:41 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-lwc-navagation-common-util/</guid>
      <description>LWC での画面遷移 LWC の中にNavigationMixinを提供しています、それを利用して、画面を遷移することができます、今回はNavigatio</description>
    </item>
    
    <item>
      <title>Githubを利用してhugoサイト構築する方法</title>
      <link>https://seiri-blog.github.io/posts/create-hugo-site/</link>
      <pubDate>Mon, 17 Apr 2023 12:53:09 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/create-hugo-site/</guid>
      <description>環境構築 今回は Win11 システムでの環境構築方法を説明致します。 下記 URL で hugo をダウロードする https://github.com/gohugoio/hugo/releases/download/v0.111.3/hugo_extended_0.111.3_windows-amd64.zip ※上記ダウンロードできない場合直接 https://github.com/gohugoio/hugo/releases にアクセスして、Wi</description>
    </item>
    
    <item>
      <title>サイトポリシーテンプレート</title>
      <link>https://seiri-blog.github.io/posts/site-policy-template/</link>
      <pubDate>Mon, 17 Apr 2023 10:58:05 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/site-policy-template/</guid>
      <description>サイトポリシーとは サイトポリシーとは、ウェブサイトの運営者が訪問者に対して示す、サイトのルールや方針をまとめたページのことです。一般的に、サ</description>
    </item>
    
    <item>
      <title>VSCodeでSalesforceのコードフォーマットする方法</title>
      <link>https://seiri-blog.github.io/posts/salesforce-source-code-format/</link>
      <pubDate>Tue, 04 Apr 2023 18:23:36 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-source-code-format/</guid>
      <description>VSCode の環境構築 今回に関しては設定は詳しく説明しません、やり方のみ詳しく説明させていただきます。 下記リンクを開いて、自分の PC にダウンロードする GitHub</description>
    </item>
    
    <item>
      <title>HugoとHexoの違い</title>
      <link>https://seiri-blog.github.io/posts/hugo-and-hexo-difference/</link>
      <pubDate>Sat, 25 Mar 2023 17:04:20 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/hugo-and-hexo-difference/</guid>
      <description>Hugo と Hexo は、両方とも静的サイトジェネレーターですが、いくつかの違いがあります。 開発言語：Hugo は Go 言語で書かれており、Hexo は JavaScript で書かれて</description>
    </item>
    
    <item>
      <title>Githubのプロファイルを設定する方法</title>
      <link>https://seiri-blog.github.io/posts/how-to-setup-github-profile/</link>
      <pubDate>Sat, 25 Mar 2023 16:46:55 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/how-to-setup-github-profile/</guid>
      <description>GitHub プロファイルを作成するには、以下の手順を実行します。 GitHub にログインし、右上のアイコンをクリックして、ドロップダウンメニューを表示します。 Your p</description>
    </item>
    
    <item>
      <title>Github使いやすいコツ</title>
      <link>https://seiri-blog.github.io/posts/how-easy-to-use-github/</link>
      <pubDate>Thu, 09 Feb 2023 10:19:33 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/how-easy-to-use-github/</guid>
      <description>Github とは GitHub は、ソフトウェア開発用のバージョン管理と協力サービスを提供する Web ベースのプラットフォームです。開発者はコードを保存し管理し、変更を追</description>
    </item>
    
    <item>
      <title>Markdown記法</title>
      <link>https://seiri-blog.github.io/posts/markdown-notation/</link>
      <pubDate>Fri, 13 Jan 2023 00:10:08 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/markdown-notation/</guid>
      <description>Markdown 記法 見出し 先頭に#をつけることによって見出しになります。見出しのレベルは#の数で表現します。 # 見出し1 ## 見出し2 ### 見出し3 #### 見出し4 ##### 見出</description>
    </item>
    
    <item>
      <title>【HTML/CSS】ul liの点を表示・非表示する方法</title>
      <link>https://seiri-blog.github.io/posts/show-and-hide-htmlcss-ul-li-point/</link>
      <pubDate>Fri, 13 Jan 2023 00:05:34 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/show-and-hide-htmlcss-ul-li-point/</guid>
      <description>本記事は ul li の点を表示・非表示する方法を紹介します。 具体的には下記を参照していただければと思います。 ul li の点を非表示する方法 &amp;lt;ul&amp;gt; &amp;lt;li&amp;</description>
    </item>
    
    <item>
      <title>【Git】ファイル名大文字&amp;小文字を区別する方法</title>
      <link>https://seiri-blog.github.io/posts/git-config-core-ignorecase/</link>
      <pubDate>Thu, 29 Dec 2022 19:36:52 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/git-config-core-ignorecase/</guid>
      <description>Git でのファイル名の大文字・小文字区別の説明 Git はファイル名の大文字・小文字を区別します。 例えば、「hello.txt」と「Hello.txt」</description>
    </item>
    
    <item>
      <title>【Git】上級操作方法(その１)</title>
      <link>https://seiri-blog.github.io/posts/git-advanced-operation-part1/</link>
      <pubDate>Thu, 29 Dec 2022 19:36:52 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/git-advanced-operation-part1/</guid>
      <description>Git の上級操作方法 Git には様々な上級操作がありますが、今回は下記操作方法を説明したいと思います。 マージ: master ブランチから最新のソースを取得し、ne</description>
    </item>
    
    <item>
      <title>【Git】上級操作方法(その２)</title>
      <link>https://seiri-blog.github.io/posts/git-advanced-operation-part2/</link>
      <pubDate>Thu, 29 Dec 2022 19:36:52 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/git-advanced-operation-part2/</guid>
      <description>Git の上級操作方法 Git には様々な上級操作がありますが、今回は下記操作方法を説明したいと思います。 タグの操作: タグを作成、削除、移動する方法。 # タ</description>
    </item>
    
    <item>
      <title>【Git】上級操作方法(その３)</title>
      <link>https://seiri-blog.github.io/posts/git-advanced-operation-part3/</link>
      <pubDate>Thu, 29 Dec 2022 19:36:52 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/git-advanced-operation-part3/</guid>
      <description>Git の上級操作方法 Git には様々な上級操作がありますが、今回は下記操作方法を説明したいと思います。 git cherry-pick: git cherry-pick コマンドは、特定のコミットを別のブランチ</description>
    </item>
    
    <item>
      <title>【Git】説明と基本操作方法</title>
      <link>https://seiri-blog.github.io/posts/git-operation/</link>
      <pubDate>Thu, 29 Dec 2022 19:36:52 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/git-operation/</guid>
      <description>Git の用途と関連製品の紹介 Git はオープンソースの分散型バージョン管理システムです。 開発者が複数人で協力してソフトウェアを開発するために使用されま</description>
    </item>
    
    <item>
      <title>【Salesforce】LWCライフサイクルフック</title>
      <link>https://seiri-blog.github.io/posts/lwc-life-cycle-hook/</link>
      <pubDate>Thu, 29 Dec 2022 19:36:52 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-life-cycle-hook/</guid>
      <description>LWCライフサイクルフックの説明 LWC のライフサイクルフックには、インスタンス化、接続、更新、破棄の 4 つのフェーズがあります。それぞれのフェーズ</description>
    </item>
    
    <item>
      <title>【Salesforce】LWC入門</title>
      <link>https://seiri-blog.github.io/posts/lwc-introduction/</link>
      <pubDate>Thu, 29 Dec 2022 19:36:52 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-introduction/</guid>
      <description>LWC（Lightning Web Component） とは LWC（Lightning Web Component） は、Web Componentsを使用して</description>
    </item>
    
    <item>
      <title>【Salesforce】LWC環境構築</title>
      <link>https://seiri-blog.github.io/posts/salesforce-lwc-setup-environment/</link>
      <pubDate>Thu, 29 Dec 2022 19:36:52 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-lwc-setup-environment/</guid>
      <description>LWC の環境構築方法 LWC の環境構築の詳しい方法は以下のようになります。 Salesforce の Developer Edition アカウントを取得します。 Developer Edition アカウントは、開発者向けのアカウントで、</description>
    </item>
    
    <item>
      <title>【Salesforce】LWCでのファイルダウンロード</title>
      <link>https://seiri-blog.github.io/posts/lwc-download-file/</link>
      <pubDate>Thu, 29 Dec 2022 16:30:01 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-download-file/</guid>
      <description>目的 LWC でのファイルダウンロード方法を共有します。 ソース構成図 force-app └─main └─default ├─classes │ ├─GetFileDemoC</description>
    </item>
    
    <item>
      <title>【Salesforce】LWCでのファイル一括ダウンロード方法</title>
      <link>https://seiri-blog.github.io/posts/lwc-mass-file-download/</link>
      <pubDate>Thu, 29 Dec 2022 16:30:01 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-mass-file-download/</guid>
      <description>目的 今回 Classic モードで Visualforce に LWC のでファイル一括ダウンロードする方法を共有します。 前提 jszip.js を静的リソースにアップロードする ソース構成図 force-app └─main └</description>
    </item>
    
    <item>
      <title>【AWS】S3 へファイル転送ツール</title>
      <link>https://seiri-blog.github.io/posts/aws-file-transfer-tool-to-s3/</link>
      <pubDate>Mon, 19 Dec 2022 18:34:03 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-file-transfer-tool-to-s3/</guid>
      <description>準備 まずCloudBerry Explorerをアクセス 自分のメールアドレスを入力してから Download ボタン押下する ツールをダウンロードする ツールをイン</description>
    </item>
    
    <item>
      <title>OpenAIに関する話</title>
      <link>https://seiri-blog.github.io/posts/story-about-openai/</link>
      <pubDate>Mon, 12 Dec 2022 19:48:11 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/story-about-openai/</guid>
      <description>OpenAI とは OpenAI は人工知能の研究を行う非営利団体です。OpenAI は 2015 年にエリック・シュミット氏、イーサン・アシマー氏、ジョン・ピータース氏、ブロン</description>
    </item>
    
    <item>
      <title>GPT3に関する話</title>
      <link>https://seiri-blog.github.io/posts/story-about-gpt3/</link>
      <pubDate>Mon, 12 Dec 2022 18:27:05 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/story-about-gpt3/</guid>
      <description>GPT とは GPT は Generative Pretrained Transformer の略で、トランスフォーマーを使った言語モデルの一種です。GPT は大量の文章データを分析し、それらから文章を生成することができ</description>
    </item>
    
    <item>
      <title>OpenAI 使い方</title>
      <link>https://seiri-blog.github.io/posts/openai-how-to-use/</link>
      <pubDate>Sat, 10 Dec 2022 10:47:15 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/openai-how-to-use/</guid>
      <description>ChatGPT とは ChatGPT は、OpenAI が開発した大規模な言語処理の人工知能モデルです。GPT は「Generative Pre-trained Transformer」の略で、「生</description>
    </item>
    
    <item>
      <title>Amazon API Gateway</title>
      <link>https://seiri-blog.github.io/posts/amazon-api-gateway/</link>
      <pubDate>Fri, 22 Jul 2022 16:42:09 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/amazon-api-gateway/</guid>
      <description>Amazon API Gateway とは Amazon API Gateway は、あらゆる規模の REST、HTTP、および WebSocket API を作成、公開、維持、モニタリング、およびセキュア化するための AWS のサービスです</description>
    </item>
    
    <item>
      <title>AWS Lambda</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda/</link>
      <pubDate>Fri, 22 Jul 2022 12:03:11 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda/</guid>
      <description>AWS Lambda とは Lambda はサーバーをプロビジョニングしたり管理しなくてもコードを実行できるコンピューティングサービスです。Lambda は可用性の高いコンピ</description>
    </item>
    
    <item>
      <title>Amazon S3</title>
      <link>https://seiri-blog.github.io/posts/amazons-s3/</link>
      <pubDate>Fri, 22 Jul 2022 11:54:52 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/amazons-s3/</guid>
      <description>Amazon S3 とは Amazon Simple Storage Service (Amazon S3) は、業界をリードするスケーラビリティ、データ可用性、セキュリティ、およびパフォーマンスを提供するオブジェクトストレージサ</description>
    </item>
    
    <item>
      <title>AWS DynamoDB</title>
      <link>https://seiri-blog.github.io/posts/aws-dynamodb/</link>
      <pubDate>Thu, 14 Jul 2022 16:33:15 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-dynamodb/</guid>
      <description>Amazon DynamoDB とは Amazon DynamoDB デベロッパーガイド Amazon DynamoDB は、フルマネージドの NoSQL データベースサービスであり、高速で予測可能なパフォーマンスとシームレスな拡張性が特長</description>
    </item>
    
    <item>
      <title>【Salesforce】Apexで選択リスト取得方法</title>
      <link>https://seiri-blog.github.io/posts/salesforce-apex-get-picklist-value/</link>
      <pubDate>Tue, 12 Jul 2022 16:24:40 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-apex-get-picklist-value/</guid>
      <description>Apex 選択リスト取得方法説明 Apex を使用して Salesforce 内の選択リストから値を取得する方法は以下の通りです。 最初に、選択リストが定義されているオブジェクトのフ</description>
    </item>
    
    <item>
      <title>【Salesforce】アクションボタン</title>
      <link>https://seiri-blog.github.io/posts/salesforce-action-button/</link>
      <pubDate>Tue, 12 Jul 2022 16:09:43 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-action-button/</guid>
      <description>目的 LWC のlightning-quick-action-panelモーダル画面の幅を調整できないため、 今回 Aura と LWC でのアクションボタンが表示した</description>
    </item>
    
    <item>
      <title>【Salesforce】FLS権限チェック</title>
      <link>https://seiri-blog.github.io/posts/salesforce-fls-authority-check/</link>
      <pubDate>Mon, 11 Jul 2022 20:02:42 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-fls-authority-check/</guid>
      <description>目的 CRUD および項目レベルセキュリティ (FLS) 権限チェック Util を作成方法を共有します ソース public with sharing class FLSUtil { //環境の接頭辞 private static final String ENV_PREFIX = getPrefix(); //アンダーバーC private</description>
    </item>
    
    <item>
      <title>【Salesforce】プラットフォームイベント説明と利用方法</title>
      <link>https://seiri-blog.github.io/posts/salesforce-platform-event-description-and-usage/</link>
      <pubDate>Mon, 11 Jul 2022 16:45:24 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-platform-event-description-and-usage/</guid>
      <description>プラットフォームイベントの役割 プラットフォームイベントを使用し、リアルタイムイベントデータのやり取りによって、Salesforce のビジネス</description>
    </item>
    
    <item>
      <title>【Salesforce】データローダバッチ（エクスポート編）</title>
      <link>https://seiri-blog.github.io/posts/salesforce-data-loader-batch-export-edition/</link>
      <pubDate>Mon, 30 May 2022 19:45:23 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-data-loader-batch-export-edition/</guid>
      <description>データローダとは データローダは、データを一括でインポートまたはエクスポートするためのクライアントアプリケーションです。Salesforce レ</description>
    </item>
    
    <item>
      <title>【Salesforce】データローダバッチ（インポート編）</title>
      <link>https://seiri-blog.github.io/posts/salesforce-data-loader-batch-import-edition/</link>
      <pubDate>Mon, 30 May 2022 19:05:22 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-data-loader-batch-import-edition/</guid>
      <description>データローダとは データローダは、データを一括でインポートまたはエクスポートするためのクライアントアプリケーションです。Salesforce レ</description>
    </item>
    
    <item>
      <title>【Salesforce】LWCでのPath共通コンポーネント</title>
      <link>https://seiri-blog.github.io/posts/lwc-path-common-component/</link>
      <pubDate>Mon, 16 May 2022 14:11:39 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-path-common-component/</guid>
      <description>目的 LWC での Path 共通コンポーネントを共有します。 実装例 path path.html &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;slds-path&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;slds-grid slds-path__track&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;slds-grid slds-path__scroller-container&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;slds-path__scroller&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;slds-path__scroller_inner&amp;#34;&amp;gt; &amp;lt;ul class=&amp;#34;slds-path__nav&amp;#34; role=&amp;#34;listbox&amp;#34; aria-orientation=&amp;#34;horizontal&amp;#34; &amp;gt; &amp;lt;template for:each=&amp;#34;{pathItemList}&amp;#34; for:item=&amp;#34;pathItem&amp;#34; for:index=&amp;#34;index&amp;#34; &amp;gt; {getIndex} &amp;lt;template if:true=&amp;#34;{pathIndexGeCurrentIndex}&amp;#34;&amp;gt; &amp;lt;li key=&amp;#34;{pathItem}&amp;#34; if:true=&amp;#34;{pathIndexEqCurrentIndex}&amp;#34; class=&amp;#34;slds-path__item slds-is-current slds-is-active&amp;#34; role=&amp;#34;presentation&amp;#34; &amp;gt; &amp;lt;a aria-selected=&amp;#34;true&amp;#34; class=&amp;#34;slds-path__link&amp;#34; href=&amp;#34;javasctipt:void();&amp;#34; role=&amp;#34;option&amp;#34; tabindex=&amp;#34;-1&amp;#34; &amp;gt; &amp;lt;span class=&amp;#34;slds-path__stage&amp;#34;&amp;gt;</description>
    </item>
    
    <item>
      <title>【Salesforce】LWC CSV出力方法</title>
      <link>https://seiri-blog.github.io/posts/salesforce-lwc-csv-output-method/</link>
      <pubDate>Tue, 29 Mar 2022 16:38:42 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-lwc-csv-output-method/</guid>
      <description>LWC で CSV 出力方法説明 LWC で CSV ファイルを出力する考え方は主に下記の流れとなります。 1.LWC のコンポーネントにデータを持たせます。 2.CSV を作成するため、各行の</description>
    </item>
    
    <item>
      <title>Amplify &#43; Reactでアプリケーション作成</title>
      <link>https://seiri-blog.github.io/posts/application-creating-at-amplify-react/</link>
      <pubDate>Mon, 24 Jan 2022 18:11:28 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/application-creating-at-amplify-react/</guid>
      <description>準備 下記コマンドを順番に実行し、Amplify-React での環境を構築する 1.AmplifyCLI をインストール npm install -g @aws-amplify/cli 2.Amplify を設定する amplify configure Specify the AWS Region ? region: # Your preferred region Specify the</description>
    </item>
    
    <item>
      <title>AmplifyでS3と連携する方法</title>
      <link>https://seiri-blog.github.io/posts/amplify-setup-s3-and-operation/</link>
      <pubDate>Fri, 21 Jan 2022 12:15:55 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/amplify-setup-s3-and-operation/</guid>
      <description>準備 1.amplify add storageコマンドで、S3 を追加する amplify add storage ? Please select from one of the below mentioned services (Use arrow keys) ❯ Content (Images, audio, video, etc.) NoSQL Database 2.amplify pushコマンドで作成した S3 を AWS にデプロイ</description>
    </item>
    
    <item>
      <title>AmplifyでGraphQLを呼出す方法</title>
      <link>https://seiri-blog.github.io/posts/amplify-call-graphql/</link>
      <pubDate>Thu, 20 Jan 2022 19:58:17 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/amplify-call-graphql/</guid>
      <description>準備 1.amplify add apiコマンドで、GraphQL API を追加する amplify add api ? Please select from one of the below mentioned services: &amp;gt; GraphQL ? Here is the GraphQL API that we will create. Select a setting to edit or continue: &amp;gt; Continue ? Choose a schema template: &amp;gt; Single object with fields</description>
    </item>
    
    <item>
      <title>AmplifyでAPI Gatewayを呼出す方法</title>
      <link>https://seiri-blog.github.io/posts/amplify-call-gateway/</link>
      <pubDate>Thu, 20 Jan 2022 19:05:44 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/amplify-call-gateway/</guid>
      <description>準備 1.amplify add apiコマンドで、Rest API を追加する amplify add api ? Please select from one of the below mentioned services GraphQL ❯ REST 2.amplify pushコマンドで作成した Rest API を AWS にデプロイし、 AWS のAPI G</description>
    </item>
    
    <item>
      <title>AmplifyでのAuthUtilを作成する</title>
      <link>https://seiri-blog.github.io/posts/create-authutil-on-amplify/</link>
      <pubDate>Thu, 20 Jan 2022 16:31:14 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/create-authutil-on-amplify/</guid>
      <description>前提 1.amplify add authコマンドで認証サービスを作成する amplify add auth ? Do you want to use the default authentication and security configuration? Default configuration ? How do you want users to be able to sign in? Username ? Do you want to configure advanced settings? No, I am done. 2.amplify pus</description>
    </item>
    
    <item>
      <title>Pythonで日本の新型コロナ患者情報取得</title>
      <link>https://seiri-blog.github.io/posts/python-corona-patient-info-in-japanese/</link>
      <pubDate>Tue, 18 Jan 2022 19:21:37 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/python-corona-patient-info-in-japanese/</guid>
      <description>環境 Win10 python 3.8.10 ・requests==2.25.1 ・pandas==1.3.1 実装 import requests as rq import pandas as pd url = &amp;#39;https://covid19-japan-web-api.vercel.app/api/v1/positives?prefecture={0}&amp;#39; prefectures = [&amp;#39;北海道&amp;#39;,&amp;#39</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda環境変数の取得</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-environment-variable-acquisition-on-python/</link>
      <pubDate>Mon, 27 Dec 2021 17:53:32 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-environment-variable-acquisition-on-python/</guid>
      <description>準備 環境変数の設定 環境変数は、関数の未公開バージョンで定義します。バージョンを公開するとき、他のバージョン固有の設定とともに、そのバージョン</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda共通DynamoDB操作Util</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-common-dynamodb-operation-util-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 17:33:59 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-common-dynamodb-operation-util-in-python/</guid>
      <description>python での DBUtil の作成方法 以下に、Python で AWS Lambda 内で共通的に使用される DynamoDB 操作のためのユーティリティクラスの例を示します。このクラスを使用すると、</description>
    </item>
    
    <item>
      <title>AWS Lambda クォータ</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-quota/</link>
      <pubDate>Mon, 27 Dec 2021 16:29:51 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-quota/</guid>
      <description>コンピューティングとストレージ Lambda では、関数の実行と保存に使用できるコンピューティングおよびストレージリソースの量に対してクォータを設定します</description>
    </item>
    
    <item>
      <title>【AWS】LambdaでS3ファイルをtmpディレクトリに保存</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-by-s3-file-tmp-directory-save/</link>
      <pubDate>Mon, 27 Dec 2021 16:14:46 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-by-s3-file-tmp-directory-save/</guid>
      <description>tmp ディレクトリ説明 各実行環境は、/tmp ディレクトリ内の 512 MB~ 10240 MB のディスク領域を提供します。ディレクトリのコンテンツは、実行環境が停止された</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda共通ユーザ操作Util</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-common-user-operation-util-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 12:38:54 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-common-user-operation-util-in-python/</guid>
      <description>目的 boto3 ラブライブを利用して、AWS Coginit での操作 Utitl 作成方法を共有します。 実装 # -*- coding: utf-8 -*- import secrets import string import boto3 USERPOOL_ID = &amp;#39;USERPOOL_ID&amp;#39; client = boto3.client(&amp;#39;cognito-idp&amp;#39;) def show_user_list(): &amp;#34;&amp;#34;&amp;#34;</description>
    </item>
    
    <item>
      <title>PythonでStepFunctionを実行する方法(boto3)</title>
      <link>https://seiri-blog.github.io/posts/python-execute-stepfunction/</link>
      <pubDate>Mon, 27 Dec 2021 12:18:23 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/python-execute-stepfunction/</guid>
      <description>実装方法 Python の boto3 ライブラリを使用して AWS Step Functions を実行するには、以下の手順に従います。 boto3 モジュールをインポートします。 import boto3 Step Functions クライアントを作成しま</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambdaキュー送信</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-queue-send-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 12:15:01 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-queue-send-in-python/</guid>
      <description>実装方法 Python で AWS Lambda からキューにメッセージを送信するには、以下の手順に従います。 boto3モジュールをインポートします。 import boto3 SQS (Simple Queue Service) クライアント</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda共通ログ出力Util</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-common-logging-util-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 12:06:59 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-common-logging-util-in-python/</guid>
      <description>実装方法 以下に、Python で AWS Lambda 内で共通的に使用されるログ出力のためのユーティリティクラスの例を示します。このクラスを使用すると、Lamb</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda 共通認証Util</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-common-authorization-util-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 11:54:25 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-common-authorization-util-in-python/</guid>
      <description>実装方法 Cognito User Pool を使用するためのユーティリティクラスの例を示します。このクラスは、AWS SDK の boto3 を使用して Cognito User Pool とのインタラクションを簡素化しま</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda共通レスポンスUtil</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-common-response-util-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 11:22:36 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-common-response-util-in-python/</guid>
      <description>共通レスポンス Util 以下に、Python で AWS Lambda 内で共通的に使用されるレスポンスのためのユーティリティクラスの例を示します。このクラスを使用すると</description>
    </item>
    
    <item>
      <title>JavaScript日付フォーマット</title>
      <link>https://seiri-blog.github.io/posts/js-date-format/</link>
      <pubDate>Fri, 24 Dec 2021 15:08:50 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/js-date-format/</guid>
      <description>JavaScript日付フォーマット方法 JavaScript 日付フォーマット方法を紹介します。 方法 1 JavaScript での日付フォーマットは正規表現と Date 型のgetFullYe</description>
    </item>
    
    <item>
      <title>JSでのURLパラメータ取得</title>
      <link>https://seiri-blog.github.io/posts/js-get-url-parameter/</link>
      <pubDate>Fri, 24 Dec 2021 15:06:16 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/js-get-url-parameter/</guid>
      <description>実装例 /** * パラーメタの取得 * @param {string} name パラメータ名 * @param {string} url URL * @returns {string} 取得パラメータ */ export const getParam = (name, url) =&amp;gt; { if (!url) url = window.location.href; name = name.replace(/[\[\]]/g, &amp;#39;\\$&amp;amp;&amp;#39;); let regex = new RegExp(&amp;#39;[?&amp;amp;]&amp;#39; + name + &amp;#39;(=([^&amp;amp;#]*)|&amp;amp;|#|$)&amp;#39;), results = regex.exec(url); if (!results)</description>
    </item>
    
    <item>
      <title>JSでのファイルサイズ変換関数</title>
      <link>https://seiri-blog.github.io/posts/js-file-size-convert/</link>
      <pubDate>Fri, 24 Dec 2021 15:04:24 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/js-file-size-convert/</guid>
      <description>javascript でファイルサイズを変換する関数を作成するには、以下のようなコードを使用できます。 /** * ファイルサイズ変換 * @param {*} sizeInBytes バイト * @returns 変換後のサイズ */ function</description>
    </item>
    
    <item>
      <title>Pythonでのデータ埋める方法</title>
      <link>https://seiri-blog.github.io/posts/python-fill-data/</link>
      <pubDate>Thu, 23 Dec 2021 12:51:07 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/python-fill-data/</guid>
      <description>実装例 def padding_formatter(item, padding, data_type): &amp;#34;&amp;#34;&amp;#34; 引数で指定された桁数までデータを埋める 埋める内容は以下の通り ・データ型[numeric: 数字] 先頭0埋め ・データ型[half</description>
    </item>
    
    <item>
      <title>PythonでのDBSessionクラス</title>
      <link>https://seiri-blog.github.io/posts/python-dbsession-class/</link>
      <pubDate>Thu, 23 Dec 2021 12:38:42 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/python-dbsession-class/</guid>
      <description>SQLAlchemy とは SQLAlchemy とは、python の中では最もよく利用されている ORM の一つです。 ORM 以外にも以下の機能を持ちます。 1.データベースへの接続、SQL の実行</description>
    </item>
    
    <item>
      <title>JSでのイベントUtil作成</title>
      <link>https://seiri-blog.github.io/posts/js-event-util/</link>
      <pubDate>Tue, 21 Dec 2021 19:07:59 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/js-event-util/</guid>
      <description>実装例 export class EventEmitter { constructor() { this.registry = {}; } on(name, listener) { this.registry[name] = this.registry[name] || []; this.registry[name].push(listener); return this; } once(name, listener) { const doOnce = function () { listener.apply(null, arguments); this.removeListener(name, doOnce); }.bind(this); this.on(name, doOnce); return this; } emit(name) { const args = Array.prototype.slice.call(arguments, 1); const listeners = this.registry[name]; let count = 0; if (listeners) { listeners.forEach((listener) =&amp;gt; { count += 1; listener.apply(null, args);</description>
    </item>
    
    <item>
      <title>JSでのストレージUtil作成</title>
      <link>https://seiri-blog.github.io/posts/js-storage-util/</link>
      <pubDate>Tue, 21 Dec 2021 18:33:46 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/js-storage-util/</guid>
      <description>1.説明 セッションストレージとロカールストレージ Util の作成方法を共有します。 2.ソース /** * セッション */ export const session = { /** * セッションストレージ設定 *</description>
    </item>
    
    <item>
      <title>JSでのレスポンスクラスハンドラーの作成</title>
      <link>https://seiri-blog.github.io/posts/response-class-handler-creating-on-js/</link>
      <pubDate>Tue, 21 Dec 2021 18:30:15 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/response-class-handler-creating-on-js/</guid>
      <description>1.目的 レスポンスクラスハンドラーの作成方法を共有します。 2.ソース /** * リクエストの結果をハンドリングする. * @param {Promiss} promiss * @return reponse レスポンス =&amp;gt; {success: XXX, data:</description>
    </item>
    
    <item>
      <title>【Salesforce】LWC 共通 Toast Util</title>
      <link>https://seiri-blog.github.io/posts/salesforce-lwc-toast-message-common-util/</link>
      <pubDate>Tue, 21 Dec 2021 18:27:36 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-lwc-toast-message-common-util/</guid>
      <description>LWC での Toast メッセージ LWC で Toast メッセージを表示するために、共通の Util クラスを作成することができます。 Toast メッセージのタイトル、メッセージ、種類(suc</description>
    </item>
    
    <item>
      <title>【Salesforce】LWCモーダル画面自分で作る</title>
      <link>https://seiri-blog.github.io/posts/lwc-common-modal/</link>
      <pubDate>Mon, 29 Nov 2021 19:36:52 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-common-modal/</guid>
      <description>共通モーダル画面作成方法説明 共通モーダルはモーダルを開くための API を持ち、他のコンポーネントから呼び出すことができます。 他のコンポーネントで、</description>
    </item>
    
    <item>
      <title>ブラウザを判断する方法</title>
      <link>https://seiri-blog.github.io/posts/js-judge-browser/</link>
      <pubDate>Mon, 22 Nov 2021 17:28:47 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/js-judge-browser/</guid>
      <description>目的 JavaScript でブラウザを判断する方法を共有します。 実行方法 export const isIE11 = isIE11Test(navigator); export const isChrome = isChromeTest(navigator); export const isSafari = isSafariTest(navigator); export function isIE11Test(navigator) { return /Trident.*rv[ :]*11\./.test(navigator.userAgent); } export function isChromeTest(navigator) { return ( /Chrome/.test(navigator.userAgent) &amp;amp;&amp;amp; /Google Inc/.test(navigator.vendor) ); } export function isSafariTest(navigator) { return /^((?!chrome|android).)*safari/i.test(navigator.userAgent); }</description>
    </item>
    
    <item>
      <title>【Salesforce】Apex共通レスポンス基底クラス</title>
      <link>https://seiri-blog.github.io/posts/salesforce-apex-common-response-superclass/</link>
      <pubDate>Mon, 22 Nov 2021 17:18:13 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-apex-common-response-superclass/</guid>
      <description>Apex共通レスポンス基底クラス作成方法 LWC で Apex クラスを呼出す基底クラスを作成する方法を共有します。 LWC で Apex クラスを呼出すときの返却値は主に正常</description>
    </item>
    
    <item>
      <title>JavaScriptで配列を比較する方法</title>
      <link>https://seiri-blog.github.io/posts/js-by-array-diff/</link>
      <pubDate>Mon, 22 Nov 2021 17:06:22 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/js-by-array-diff/</guid>
      <description>実装例 /** * 配列の比較 * @param array1 配列1 * @param array2 配列2 * @returns 同じの場合：True、その他の場合：False */ export const arraysEqual = (array1, array2) =&amp;gt; { if (!array1 || !array2) { return false; } if (array1.length !== array2.length) { return</description>
    </item>
    
    <item>
      <title>JavaScriptでオブジェクトをコピーする方法</title>
      <link>https://seiri-blog.github.io/posts/js-object-copy/</link>
      <pubDate>Mon, 22 Nov 2021 17:05:15 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/js-object-copy/</guid>
      <description>実行例 /** * オブジェクトをコピー * @param obj 対象オブジェクト * @return 新しいオブジェクト */ export const deepCopy = (obj) =&amp;gt; { if (Object(obj) !== obj) { return obj; } if (obj instanceof Set) { return new Set(obj); } if (obj instanceof Date) { return new Date(obj);</description>
    </item>
    
    <item>
      <title>JavaSrcriptでパッケージを使わずにUUIDを生成する方法</title>
      <link>https://seiri-blog.github.io/posts/generating-unique-id/</link>
      <pubDate>Mon, 22 Nov 2021 17:02:25 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/generating-unique-id/</guid>
      <description>UUID 説明 UUID（Universally Unique Identifier）は、一意の識別子を生成するための規格です。UUID は 128 ビットの値で表され、通常</description>
    </item>
    
    <item>
      <title>ApexでAWS S3署名付きURL発行</title>
      <link>https://seiri-blog.github.io/posts/apex-create-aws-s3-sign-with-url/</link>
      <pubDate>Mon, 22 Nov 2021 16:48:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/apex-create-aws-s3-sign-with-url/</guid>
      <description>署名付き URL の説明 署名付き URL は、AWS S3（Simple Storage Service）のリソースに対して一時的なアクセス許可を付与するための URL です。通常、</description>
    </item>
    
    <item>
      <title>Apex REST API コールアウトユーティリティ</title>
      <link>https://seiri-blog.github.io/posts/apex-rest-api-callouts-util-creation/</link>
      <pubDate>Mon, 22 Nov 2021 16:41:02 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/apex-rest-api-callouts-util-creation/</guid>
      <description>作成方法 Apex REST API コールアウトユーティリティ（Apex REST API Callouts Utility）を作成するには、以下の手順を参考にしてください。 Apex クラスの作成: 新し</description>
    </item>
    
    <item>
      <title>LWCでのファイルダウンロード</title>
      <link>https://seiri-blog.github.io/posts/file-download-in-lwc/</link>
      <pubDate>Mon, 02 Aug 2021 18:36:58 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/file-download-in-lwc/</guid>
      <description>目的 LWC でのファイルダウンロード方法を共有します。 ソース構成図 force-app └─main └─default ├─classes │ ├─GetFileDemoC</description>
    </item>
    
    <item>
      <title>VFページにファイルアップロード方法</title>
      <link>https://seiri-blog.github.io/posts/vfpage-lwc-file-upload/</link>
      <pubDate>Thu, 29 Jul 2021 16:30:01 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/vfpage-lwc-file-upload/</guid>
      <description>ClassモードでVFページにLWCを使う方法 Lightning Outの使用 提供されたコードはLightning Outを使用していますが、Classicモー</description>
    </item>
    
    <item>
      <title>【Salesforce】VFページにLWCを表示する方法</title>
      <link>https://seiri-blog.github.io/posts/salesforce-vfpage-display-lwc/</link>
      <pubDate>Wed, 28 Jul 2021 14:42:39 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-vfpage-display-lwc/</guid>
      <description>VF ページに LWC を表示する方法説明 基本的な考え方は VF ページに LightningOut という仕組みを利用して、LWC を表示すると思います。 LightningOut の仕組み VF ⇒ Aura ⇒ LWCという</description>
    </item>
    
    <item>
      <title>LWCでAWS S3と連携する方法</title>
      <link>https://seiri-blog.github.io/posts/lwc-by-aws-3-and-operation/</link>
      <pubDate>Wed, 28 Jul 2021 13:02:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-by-aws-3-and-operation/</guid>
      <description>1.目的 今回 LWC 中に AWS の SDK for javascript で S3 と連携する方法を共有します。 2.前提 2.1.AWS S3 バケット Cross-Origin Resource Sharing (CORS)の設定 [ { &amp;#34;AllowedHeaders&amp;#34;: [&amp;#34;*&amp;#34;], &amp;#34;AllowedMethods&amp;#34;: [&amp;#34;HEAD&amp;#34;, &amp;#34;GET&amp;#34;, &amp;#34;PUT&amp;#34;, &amp;#34;POST&amp;#34;, &amp;#34;DELETE&amp;#34;], &amp;#34;AllowedOrigins&amp;#34;: [&amp;#34;*&amp;#34;], &amp;#34;ExposeHeaders&amp;#34;: [&amp;#34;ETag&amp;#34;] } ] 2.2.Salesforce 側</description>
    </item>
    
    <item>
      <title>LWCでのDatePicker自分で作る</title>
      <link>https://seiri-blog.github.io/posts/lwc-custom-datepicker/</link>
      <pubDate>Mon, 26 Jul 2021 14:49:28 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-custom-datepicker/</guid>
      <description>1.目的 LWC での DatePicker の作成方法を共有します。 2.ソース構成図 lwc ├─datePicker └─datePickerContainer datePicker .select-box { background-color: rgb(255, 255, 255); border:</description>
    </item>
    
    <item>
      <title>LWCでの共通Util自分で作る</title>
      <link>https://seiri-blog.github.io/posts/lwc-common-util/</link>
      <pubDate>Mon, 26 Jul 2021 10:52:54 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-common-util/</guid>
      <description>1.目的 今回 LWC での共通 Util の作成方法を共有します。 2.ソース構成図 lwc ├─commonUtil └─commonUtilChild commonUtil /** * デートフォ</description>
    </item>
    
    <item>
      <title>【Salesforce】LWCでの共通CSS</title>
      <link>https://seiri-blog.github.io/posts/lwc-common-css/</link>
      <pubDate>Mon, 26 Jul 2021 10:30:25 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-common-css/</guid>
      <description>LWC 共通 CSS 方法説明 スタイルシートを使用して共通の CSS を定義し、それを複数のコンポーネントでインポートします。 CSS をグローバルに定義し、それをすべて</description>
    </item>
    
    <item>
      <title>LWCでのStyling Hooks</title>
      <link>https://seiri-blog.github.io/posts/lwc-styling-hooks/</link>
      <pubDate>Wed, 21 Jul 2021 19:17:39 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-styling-hooks/</guid>
      <description>1.目的 今回Lighting Desigin Systemで提供された標準デザインを変えようと思います。 基本的にはスタイルフックを使って、標準のデザインを変</description>
    </item>
    
    <item>
      <title>LWCの再帰的なコンポーネントを作成する方法</title>
      <link>https://seiri-blog.github.io/posts/lwc-recursive-component/</link>
      <pubDate>Wed, 21 Jul 2021 18:36:08 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-recursive-component/</guid>
      <description>再帰的なコンポーネント LWC（Lightning Web Component）で再帰的なコンポーネントを作成するには、コンポーネントが自身を呼び出す</description>
    </item>
    
    <item>
      <title>LWC GroupButtonコンポーネント自分で作る</title>
      <link>https://seiri-blog.github.io/posts/create-lwc-groupbutton-component-self/</link>
      <pubDate>Mon, 19 Jul 2021 19:28:25 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/create-lwc-groupbutton-component-self/</guid>
      <description>1.目的 LWC でのループ回す方法は&amp;lt;template for:eatch={items} for:item=&amp;quot;item&amp;quot; for:index=&amp;quot;idx&amp;quot;&amp;gt;ですが、但しタグ中には&amp;</description>
    </item>
    
    <item>
      <title>LWC 条件判断コンポーネント自分で作る</title>
      <link>https://seiri-blog.github.io/posts/create-lwc-condition-judgement-component-self/</link>
      <pubDate>Mon, 19 Jul 2021 18:51:44 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/create-lwc-condition-judgement-component-self/</guid>
      <description>1.目的 LWC での条件判断はif:trueまたはif:falseしか判断できないので、今回trueやfalseをこだわらない、複雑の条件を判断で</description>
    </item>
    
    <item>
      <title>LWCでカスタムCalendarコンポーネントを作る</title>
      <link>https://seiri-blog.github.io/posts/create-lwc-calendar-component/</link>
      <pubDate>Mon, 19 Jul 2021 17:29:18 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/create-lwc-calendar-component/</guid>
      <description>SalesforceのLWCでカスタムCalendarコンポーネントを作る方法を紹介します。 https://www.lightningdesignsystem.com/components/datepickers/ 上記公式サイトのUIを基づいて、LWCでカスタ</description>
    </item>
    
    <item>
      <title>LWC ContextMenuコンポーネント自分で作る</title>
      <link>https://seiri-blog.github.io/posts/create-lwc-contextmenu-component-self/</link>
      <pubDate>Mon, 19 Jul 2021 11:26:55 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/create-lwc-contextmenu-component-self/</guid>
      <description>1.目的 今回 LWC で ContextMenu コンポーネントを作成しようと思います、 基本的な考え方は右クリックをすると、カーソルの座標を取得し、 その座標を使って、Con</description>
    </item>
    
    <item>
      <title>【Salesforce】LWC Router</title>
      <link>https://seiri-blog.github.io/posts/salesforce-lwc-router/</link>
      <pubDate>Fri, 16 Jul 2021 17:30:12 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/salesforce-lwc-router/</guid>
      <description>目的 今回自分で開発した Salesforce 側使える LWC での画面遷移方法を紹介します。 構成図 lwc ├─router ├─myRouterContainer ├─pageA</description>
    </item>
    
  </channel>
</rss>
