<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AWS on Seiri&#39;s Blog</title>
    <link>https://seiri-blog.github.io/tags/aws/</link>
    <description>Recent content in AWS on Seiri&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>2024 Seiri All rights reserved</copyright>
    <lastBuildDate>Mon, 19 Dec 2022 18:34:03 +0900</lastBuildDate><atom:link href="https://seiri-blog.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【AWS】S3 へファイル転送ツール</title>
      <link>https://seiri-blog.github.io/posts/aws-file-transfer-tool-to-s3/</link>
      <pubDate>Mon, 19 Dec 2022 18:34:03 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-file-transfer-tool-to-s3/</guid>
      <description>準備 まずCloudBerry Explorerをアクセス 自分のメールアドレスを入力してから Download ボタン押下する ツールをダウンロードする ツールをイン</description>
    </item>
    
    <item>
      <title>Amazon API Gateway</title>
      <link>https://seiri-blog.github.io/posts/amazon-api-gateway/</link>
      <pubDate>Fri, 22 Jul 2022 16:42:09 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/amazon-api-gateway/</guid>
      <description>Amazon API Gateway とは Amazon API Gateway は、あらゆる規模の REST、HTTP、および WebSocket API を作成、公開、維持、モニタリング、およびセキュア化するための AWS のサービスです</description>
    </item>
    
    <item>
      <title>AWS Lambda</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda/</link>
      <pubDate>Fri, 22 Jul 2022 12:03:11 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda/</guid>
      <description>AWS Lambda とは Lambda はサーバーをプロビジョニングしたり管理しなくてもコードを実行できるコンピューティングサービスです。Lambda は可用性の高いコンピ</description>
    </item>
    
    <item>
      <title>Amazon S3</title>
      <link>https://seiri-blog.github.io/posts/amazons-s3/</link>
      <pubDate>Fri, 22 Jul 2022 11:54:52 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/amazons-s3/</guid>
      <description>Amazon S3 とは Amazon Simple Storage Service (Amazon S3) は、業界をリードするスケーラビリティ、データ可用性、セキュリティ、およびパフォーマンスを提供するオブジェクトストレージサ</description>
    </item>
    
    <item>
      <title>AWS DynamoDB</title>
      <link>https://seiri-blog.github.io/posts/aws-dynamodb/</link>
      <pubDate>Thu, 14 Jul 2022 16:33:15 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-dynamodb/</guid>
      <description>Amazon DynamoDB とは Amazon DynamoDB デベロッパーガイド Amazon DynamoDB は、フルマネージドの NoSQL データベースサービスであり、高速で予測可能なパフォーマンスとシームレスな拡張性が特長</description>
    </item>
    
    <item>
      <title>Amplify &#43; Reactでアプリケーション作成</title>
      <link>https://seiri-blog.github.io/posts/application-creating-at-amplify-react/</link>
      <pubDate>Mon, 24 Jan 2022 18:11:28 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/application-creating-at-amplify-react/</guid>
      <description>準備 下記コマンドを順番に実行し、Amplify-React での環境を構築する 1.AmplifyCLI をインストール npm install -g @aws-amplify/cli 2.Amplify を設定する amplify configure Specify the AWS Region ? region: # Your preferred region Specify the</description>
    </item>
    
    <item>
      <title>AmplifyでS3と連携する方法</title>
      <link>https://seiri-blog.github.io/posts/amplify-setup-s3-and-operation/</link>
      <pubDate>Fri, 21 Jan 2022 12:15:55 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/amplify-setup-s3-and-operation/</guid>
      <description>準備 1.amplify add storageコマンドで、S3 を追加する amplify add storage ? Please select from one of the below mentioned services (Use arrow keys) ❯ Content (Images, audio, video, etc.) NoSQL Database 2.amplify pushコマンドで作成した S3 を AWS にデプロイ</description>
    </item>
    
    <item>
      <title>AmplifyでGraphQLを呼出す方法</title>
      <link>https://seiri-blog.github.io/posts/amplify-call-graphql/</link>
      <pubDate>Thu, 20 Jan 2022 19:58:17 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/amplify-call-graphql/</guid>
      <description>準備 1.amplify add apiコマンドで、GraphQL API を追加する amplify add api ? Please select from one of the below mentioned services: &amp;gt; GraphQL ? Here is the GraphQL API that we will create. Select a setting to edit or continue: &amp;gt; Continue ? Choose a schema template: &amp;gt; Single object with fields</description>
    </item>
    
    <item>
      <title>AmplifyでAPI Gatewayを呼出す方法</title>
      <link>https://seiri-blog.github.io/posts/amplify-call-gateway/</link>
      <pubDate>Thu, 20 Jan 2022 19:05:44 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/amplify-call-gateway/</guid>
      <description>準備 1.amplify add apiコマンドで、Rest API を追加する amplify add api ? Please select from one of the below mentioned services GraphQL ❯ REST 2.amplify pushコマンドで作成した Rest API を AWS にデプロイし、 AWS のAPI G</description>
    </item>
    
    <item>
      <title>AmplifyでのAuthUtilを作成する</title>
      <link>https://seiri-blog.github.io/posts/create-authutil-on-amplify/</link>
      <pubDate>Thu, 20 Jan 2022 16:31:14 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/create-authutil-on-amplify/</guid>
      <description>前提 1.amplify add authコマンドで認証サービスを作成する amplify add auth ? Do you want to use the default authentication and security configuration? Default configuration ? How do you want users to be able to sign in? Username ? Do you want to configure advanced settings? No, I am done. 2.amplify pus</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda環境変数の取得</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-environment-variable-acquisition-on-python/</link>
      <pubDate>Mon, 27 Dec 2021 17:53:32 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-environment-variable-acquisition-on-python/</guid>
      <description>準備 環境変数の設定 環境変数は、関数の未公開バージョンで定義します。バージョンを公開するとき、他のバージョン固有の設定とともに、そのバージョン</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda共通DynamoDB操作Util</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-common-dynamodb-operation-util-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 17:33:59 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-common-dynamodb-operation-util-in-python/</guid>
      <description>python での DBUtil の作成方法 以下に、Python で AWS Lambda 内で共通的に使用される DynamoDB 操作のためのユーティリティクラスの例を示します。このクラスを使用すると、</description>
    </item>
    
    <item>
      <title>AWS Lambda クォータ</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-quota/</link>
      <pubDate>Mon, 27 Dec 2021 16:29:51 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-quota/</guid>
      <description>コンピューティングとストレージ Lambda では、関数の実行と保存に使用できるコンピューティングおよびストレージリソースの量に対してクォータを設定します</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda共通ユーザ操作Util</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-common-user-operation-util-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 12:38:54 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-common-user-operation-util-in-python/</guid>
      <description>目的 boto3 ラブライブを利用して、AWS Coginit での操作 Utitl 作成方法を共有します。 実装 # -*- coding: utf-8 -*- import secrets import string import boto3 USERPOOL_ID = &amp;#39;USERPOOL_ID&amp;#39; client = boto3.client(&amp;#39;cognito-idp&amp;#39;) def show_user_list(): &amp;#34;&amp;#34;&amp;#34;</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambdaキュー送信</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-queue-send-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 12:15:01 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-queue-send-in-python/</guid>
      <description>実装方法 Python で AWS Lambda からキューにメッセージを送信するには、以下の手順に従います。 boto3モジュールをインポートします。 import boto3 SQS (Simple Queue Service) クライアント</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda共通ログ出力Util</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-common-logging-util-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 12:06:59 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-common-logging-util-in-python/</guid>
      <description>実装方法 以下に、Python で AWS Lambda 内で共通的に使用されるログ出力のためのユーティリティクラスの例を示します。このクラスを使用すると、Lamb</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda 共通認証Util</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-common-authorization-util-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 11:54:25 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-common-authorization-util-in-python/</guid>
      <description>実装方法 Cognito User Pool を使用するためのユーティリティクラスの例を示します。このクラスは、AWS SDK の boto3 を使用して Cognito User Pool とのインタラクションを簡素化しま</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda共通レスポンスUtil</title>
      <link>https://seiri-blog.github.io/posts/aws-lambda-common-response-util-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 11:22:36 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/aws-lambda-common-response-util-in-python/</guid>
      <description>共通レスポンス Util 以下に、Python で AWS Lambda 内で共通的に使用されるレスポンスのためのユーティリティクラスの例を示します。このクラスを使用すると</description>
    </item>
    
    <item>
      <title>ApexでAWS S3署名付きURL発行</title>
      <link>https://seiri-blog.github.io/posts/apex-create-aws-s3-sign-with-url/</link>
      <pubDate>Mon, 22 Nov 2021 16:48:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/apex-create-aws-s3-sign-with-url/</guid>
      <description>署名付き URL の説明 署名付き URL は、AWS S3（Simple Storage Service）のリソースに対して一時的なアクセス許可を付与するための URL です。通常、</description>
    </item>
    
    <item>
      <title>LWCでAWS S3と連携する方法</title>
      <link>https://seiri-blog.github.io/posts/lwc-by-aws-3-and-operation/</link>
      <pubDate>Wed, 28 Jul 2021 13:02:56 +0900</pubDate>
      
      <guid>https://seiri-blog.github.io/posts/lwc-by-aws-3-and-operation/</guid>
      <description>1.目的 今回 LWC 中に AWS の SDK for javascript で S3 と連携する方法を共有します。 2.前提 2.1.AWS S3 バケット Cross-Origin Resource Sharing (CORS)の設定 [ { &amp;#34;AllowedHeaders&amp;#34;: [&amp;#34;*&amp;#34;], &amp;#34;AllowedMethods&amp;#34;: [&amp;#34;HEAD&amp;#34;, &amp;#34;GET&amp;#34;, &amp;#34;PUT&amp;#34;, &amp;#34;POST&amp;#34;, &amp;#34;DELETE&amp;#34;], &amp;#34;AllowedOrigins&amp;#34;: [&amp;#34;*&amp;#34;], &amp;#34;ExposeHeaders&amp;#34;: [&amp;#34;ETag&amp;#34;] } ] 2.2.Salesforce 側</description>
    </item>
    
  </channel>
</rss>
